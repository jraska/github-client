plugins {
  id "com.jraska.module.graph.assertion" version "2.1.0"
  id "com.github.triplet.play" version "3.7.0"
  id "com.jraska.github.client.firebase"
  id 'com.jraska.gradle.buildtime'
  id 'com.jraska.github.client.release'
  id 'com.jraska.module.stats'
  id 'com.jraska.module.lint.report'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.gms.google-services'
if (System.getenv("CI") == "true") {
  println("Applying 'com.google.firebase.firebase-perf'")
  apply plugin: 'com.google.firebase.firebase-perf'
}

apply plugin: 'com.google.firebase.crashlytics'

android {
  compileSdkVersion 31

  defaultConfig {
    applicationId "com.jraska.github.client"
    minSdkVersion 24
    targetSdkVersion 31
    versionName '0.36.3'
    versionCode 139
    multiDexEnabled true

    testInstrumentationRunner "com.jraska.github.client.TestRunner"
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  kotlinOptions.jvmTarget = JavaVersion.VERSION_1_8.toString()

  signingConfigs {
    debug {
      storeFile file("debug.keystore")
      storePassword "github-client"
      keyAlias "github-client"
      keyPassword "github-client"
    }
    release {
      storeFile file("prod.keystore")
      storePassword = System.getenv('CLIENT_GITHUB_STORE_PASS')
      keyAlias "prod"
      keyPassword System.getenv('CLIENT_GITHUB_KEY_PASS')
    }
  }

  buildTypes {
    debug {
      signingConfig signingConfigs.debug
      minifyEnabled false
      applicationIdSuffix '.dev'
      versionNameSuffix '-dev'
    }

    release {
      signingConfig signingConfigs.release
      minifyEnabled true
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }
  }

  testOptions {
    unitTests.returnDefaultValues = true
  }

  packagingOptions {
    exclude 'META-INF/licenses/ASM'
    exclude 'META-INF/AL2.0'
    exclude 'META-INF/LGPL2.1'
  }

  if (gradle.startParameter.taskNames.any { it.contains("Firebase") }) {
    sourceSets.androidTest.java {
      srcDirs += ["../feature/about/src/androidTest/java"]
      srcDirs += ["../feature/users/src/androidTest/java"]
    }
    sourceSets.androidTest.assets {
      srcDirs += ["../feature/about/src/androidTest/assets"]
      srcDirs += ["../feature/users/src/androidTest/assets"]
    }
  }
}

dependencies {
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

  implementation project(':core-api')
  implementation project(':core')
  implementation project(':core-android-api')
  implementation project(':navigation-api')
  implementation project(':feature:identity')
  implementation project(':feature:identity-api')
  implementation project(':feature:network-status')
  implementation project(':feature:push')
  implementation project(':feature:users')
  implementation project(':feature:repo')
  implementation project(':feature:settings')
  implementation project(':feature:about')
  implementation project(':feature:shortcuts')
  implementation project(':feature:chrome-custom-tabs')
  implementation project(':feature:in-app-update')
  implementation project(':feature:config-debug')
  implementation project(':feature:config-debug-api')

  implementation 'androidx.appcompat:appcompat:1.4.0'
  implementation 'androidx.browser:browser:1.4.0'
  implementation 'androidx.cardview:cardview:1.0.0'
  implementation 'androidx.core:core:1.7.0'
  implementation 'androidx.legacy:legacy-support-v4:1.0.0'
  implementation 'androidx.lifecycle:lifecycle-runtime:2.4.0'
  implementation 'androidx.media:media:1.4.3'
  implementation 'androidx.recyclerview:recyclerview:1.2.1'
  implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
  implementation 'androidx.vectordrawable:vectordrawable-animated:1.1.0'

  implementation 'com.airbnb.android:epoxy:4.6.4'

  implementation 'com.google.android.material:material:1.4.0'

  implementation platform('com.google.firebase:firebase-bom:29.0.3')
  implementation 'com.google.firebase:firebase-core'
  implementation 'com.google.firebase:firebase-config'
  implementation 'com.google.firebase:firebase-perf'
  implementation 'com.google.firebase:firebase-crashlytics'
  implementation 'com.google.firebase:firebase-messaging'
  implementation 'com.google.firebase:firebase-inappmessaging-display'
  implementation 'com.google.firebase:firebase-database'

  implementation fresco

  kapt daggerAnnotationProcessor
  implementation dagger

  implementation retrofit
  implementation 'com.jakewharton.threetenabp:threetenabp:1.3.1'
  implementation okHttpLoggingInterceptor

  implementation 'com.jakewharton.timber:timber:5.0.1'

  implementation 'com.google.code.gson:gson:2.8.9'

  androidTestImplementation espressoCore
  androidTestImplementation espressoIdlingResource
  androidTestImplementation androidTestRunner
  androidTestImplementation androidTestRules
  androidTestImplementation 'org.assertj:assertj-core:3.21.0'
  androidTestImplementation project(':core-testing')
  androidTestImplementation project(':core-android-testing')
  androidTestImplementation coroutinesJvm

  androidTestImplementation retrofit
  androidTestImplementation retrofitGsonConverter
  androidTestImplementation okHttpMockWebServer

  kaptAndroidTest daggerAnnotationProcessor
}

apply plugin: 'com.jraska.module.graph.assertion'

moduleGraphAssert {
  maxHeight = 2
  allowed = [":app -> .*", ".* -> [\\S:]*-api"]
  restricted = [":feature:\\S* -X> :not-wanted-module-example"]
}

play {
  track = 'internal'
  serviceAccountCredentials = file("$buildDir/play-publish-key.json")
}

project.afterEvaluate {
  if (gradle.startParameter.taskNames.any { it.startsWith("publishBundle") }) {
    def credentials = System.getenv("PLAY_PUBLISHER_CREDENTIALS")
    if (credentials == null) {
      throw new GradleException("PLAY_PUBLISHER_CREDENTIALS not set, cannot release")
    }
    buildDir.mkdir()
    new File("$buildDir/play-publish-key.json").write(credentials)

    // https://github.com/Triple-T/gradle-play-publisher/issues/859
    tasks.named("publishBundle").configure {
      it.dependsOn("uploadCrashlyticsMappingFileRelease")
    }
  }
}
