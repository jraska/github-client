import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

project.afterEvaluate {
  def setupGCloudProject = tasks.register("setupGCloudProject", Exec.class) {
    commandLine = "gcloud config set project github-client-25b47".split(' ')
    dependsOn(project.tasks.named("assembleDebugAndroidTest"))
  }

  def setupGCloudAccount = tasks.register("setupGCloudAccount", Exec.class) {
    def credentialsPath = createCredentialsFile()
    commandLine = "gcloud auth activate-service-account --key-file $credentialsPath".split(' ')

    dependsOn(setupGCloudProject)
  }

  String resultsFileToPull

  def executeTestsInTestLab = tasks.register("executeInstrumentedTestsOnFirebase", Exec.class) {
    def appApk = "${project.buildDir}/outputs/apk/debug/app-debug.apk"
    def testApk = "${project.buildDir}/outputs/apk/androidTest/debug/app-debug-androidTest.apk"
    def deviceName = "flame"
    def androidVersion = "29"
    def device = "model=$deviceName,version=$androidVersion,locale=en,orientation=portrait"
    def resultDir = DateTimeFormatter.ISO_DATE_TIME.format(LocalDateTime.now())

    resultsFileToPull = "gs://test-lab-twsawhz0hy5am-h35y3vymzadax/$resultDir/$deviceName-$androidVersion-en-portrait/test_result_1.xml"

    commandLine =
      ("gcloud " +
        "firebase test android run " +
        "--app $appApk " +
        "--test $testApk " +
        "--device $device " +
        "--results-dir $resultDir " +
        "--no-performance-metrics")
        .split(' ')

    dependsOn(project.tasks.named("assembleDebugAndroidTest"))
    dependsOn(project.tasks.named("assembleDebug"))
    dependsOn(setupGCloudAccount)
  }

  def pullResults = tasks.register("pullFirebaseXmlResults", Exec.class) {
    dependsOn(executeTestsInTestLab)

    doFirst {
      commandLine = "gsutil cp $resultsFileToPull $buildDir/test-results/firebase-tests-results.xml".split(' ')
    }
  }

  tasks.register("runInstrumentedTestsOnFirebase") {
    dependsOn(executeTestsInTestLab)
    dependsOn(pullResults)
  }
}

String createCredentialsFile() {
  def credentialsPath = "$projectDir/credentials.json"
  def credentials = System.getenv("GCLOUD_CREDENTIALS")
  if (credentials != null) {
    new File(credentialsPath).write(credentials)
  }
  return credentialsPath
}

